#!/usr/bin/env python3
"""
Testes para o Sistema de Sugest√µes Contextuais do OLABOT
========================================================

Este script testa todas as funcionalidades do sistema de sugest√µes.
Execute com: python test_suggestions.py
"""

import sys
import os
import json
import requests
import time
from typing import Dict, List, Any

# Adicionar o diret√≥rio do projeto ao path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from olasis.prompt_engineering import ChatSuggestions


class SuggestionsTestSuite:
    """Suite de testes para o sistema de sugest√µes."""
    
    def __init__(self, base_url: str = "http://localhost:5001"):
        self.base_url = base_url
        self.results = []
        
    def log_test(self, test_name: str, passed: bool, details: str = ""):
        """Registra o resultado de um teste."""
        status = "‚úÖ PASS" if passed else "‚ùå FAIL"
        print(f"{status} {test_name}")
        if details:
            print(f"    {details}")
        
        self.results.append({
            "test": test_name,
            "passed": passed,
            "details": details
        })
    
    def test_suggestions_class(self):
        """Testa a classe ChatSuggestions diretamente."""
        print("\nüîß Testando classe ChatSuggestions...")
        
        # Teste 1: Sugest√µes contextuais b√°sicas
        try:
            suggestions = ChatSuggestions.get_contextual_suggestions("general", 4)
            self.log_test(
                "Sugest√µes contextuais gerais",
                len(suggestions) == 4 and all(isinstance(s, str) for s in suggestions),
                f"Retornou {len(suggestions)} sugest√µes"
            )
        except Exception as e:
            self.log_test("Sugest√µes contextuais gerais", False, str(e))
        
        # Teste 2: Sugest√µes por √°rea
        try:
            suggestions = ChatSuggestions.get_suggestions_by_field("tecnologia", 3)
            self.log_test(
                "Sugest√µes por √°rea (tecnologia)",
                len(suggestions) == 3 and all(isinstance(s, str) for s in suggestions),
                f"Retornou {len(suggestions)} sugest√µes"
            )
        except Exception as e:
            self.log_test("Sugest√µes por √°rea (tecnologia)", False, str(e))
        
        # Teste 3: Sugest√µes adaptativas
        try:
            history = ["O que √© machine learning?", "Como funcionam redes neurais?"]
            suggestions = ChatSuggestions.get_adaptive_suggestions(history, 4)
            self.log_test(
                "Sugest√µes adaptativas",
                len(suggestions) == 4 and all(isinstance(s, str) for s in suggestions),
                f"Retornou {len(suggestions)} sugest√µes baseadas no hist√≥rico"
            )
        except Exception as e:
            self.log_test("Sugest√µes adaptativas", False, str(e))
    
    def test_api_endpoints(self):
        """Testa os endpoints da API."""
        print("\nüåê Testando endpoints da API...")
        
        # Teste 1: Endpoint b√°sico
        try:
            response = requests.get(f"{self.base_url}/api/chat/suggestions", timeout=5)
            data = response.json()
            
            self.log_test(
                "Endpoint b√°sico (/api/chat/suggestions)",
                response.status_code == 200 and "suggestions" in data,
                f"Status: {response.status_code}, Sugest√µes: {len(data.get('suggestions', []))}"
            )
        except Exception as e:
            self.log_test("Endpoint b√°sico", False, str(e))
        
        # Teste 2: Endpoint com par√¢metros de contexto
        try:
            response = requests.get(
                f"{self.base_url}/api/chat/suggestions?context=advanced&count=3",
                timeout=5
            )
            data = response.json()
            
            self.log_test(
                "Endpoint com contexto avan√ßado",
                response.status_code == 200 and len(data.get("suggestions", [])) == 3,
                f"Contexto: {data.get('context')}, Count: {len(data.get('suggestions', []))}"
            )
        except Exception as e:
            self.log_test("Endpoint com contexto", False, str(e))
        
        # Teste 3: Endpoint com √°rea espec√≠fica
        try:
            response = requests.get(
                f"{self.base_url}/api/chat/suggestions?field=medicina&count=2",
                timeout=5
            )
            data = response.json()
            
            self.log_test(
                "Endpoint com campo espec√≠fico",
                response.status_code == 200 and len(data.get("suggestions", [])) == 2,
                f"Campo: {data.get('field')}, Count: {len(data.get('suggestions', []))}"
            )
        except Exception as e:
            self.log_test("Endpoint com campo", False, str(e))
        
        # Teste 4: Combina√ß√£o de par√¢metros
        try:
            response = requests.get(
                f"{self.base_url}/api/chat/suggestions?context=beginner&field=tecnologia&count=5",
                timeout=5
            )
            data = response.json()
            
            self.log_test(
                "Endpoint com m√∫ltiplos par√¢metros",
                response.status_code == 200 and data.get("suggestions"),
                f"Par√¢metros combinados funcionando"
            )
        except Exception as e:
            self.log_test("Endpoint com m√∫ltiplos par√¢metros", False, str(e))
    
    def test_performance(self):
        """Testa a performance das sugest√µes."""
        print("\n‚ö° Testando performance...")
        
        # Teste de velocidade da API
        try:
            start_time = time.time()
            response = requests.get(f"{self.base_url}/api/chat/suggestions", timeout=5)
            end_time = time.time()
            
            response_time = (end_time - start_time) * 1000  # em ms
            
            self.log_test(
                "Tempo de resposta da API",
                response_time < 1000,  # Menos de 1 segundo
                f"Tempo: {response_time:.2f}ms"
            )
        except Exception as e:
            self.log_test("Tempo de resposta da API", False, str(e))
        
        # Teste de velocidade da classe
        try:
            start_time = time.time()
            for _ in range(100):
                ChatSuggestions.get_contextual_suggestions("general", 4)
            end_time = time.time()
            
            avg_time = ((end_time - start_time) / 100) * 1000  # em ms
            
            self.log_test(
                "Performance da classe ChatSuggestions",
                avg_time < 10,  # Menos de 10ms por chamada
                f"Tempo m√©dio: {avg_time:.2f}ms por chamada"
            )
        except Exception as e:
            self.log_test("Performance da classe", False, str(e))
    
    def test_data_quality(self):
        """Testa a qualidade dos dados das sugest√µes."""
        print("\nüìä Testando qualidade dos dados...")
        
        # Teste 1: Verificar se todas as categorias t√™m sugest√µes
        try:
            all_contexts = ["general", "beginner", "intermediate", "advanced", 
                          "search_focused", "methodology_focused"]
            
            missing_contexts = []
            for context in all_contexts:
                suggestions = ChatSuggestions.get_contextual_suggestions(context, 1)
                if not suggestions:
                    missing_contexts.append(context)
            
            self.log_test(
                "Cobertura de contextos",
                len(missing_contexts) == 0,
                f"Contextos sem sugest√µes: {missing_contexts}" if missing_contexts else "Todos os contextos t√™m sugest√µes"
            )
        except Exception as e:
            self.log_test("Cobertura de contextos", False, str(e))
        
        # Teste 2: Verificar se todas as √°reas t√™m sugest√µes
        try:
            all_fields = ["medicina", "tecnologia", "meio_ambiente", "educacao"]
            
            missing_fields = []
            for field in all_fields:
                suggestions = ChatSuggestions.get_suggestions_by_field(field, 1)
                if not suggestions:
                    missing_fields.append(field)
            
            self.log_test(
                "Cobertura de √°reas",
                len(missing_fields) == 0,
                f"√Åreas sem sugest√µes: {missing_fields}" if missing_fields else "Todas as √°reas t√™m sugest√µes"
            )
        except Exception as e:
            self.log_test("Cobertura de √°reas", False, str(e))
        
        # Teste 3: Verificar unicidade das sugest√µes
        try:
            suggestions = ChatSuggestions.get_contextual_suggestions("general", 10)
            unique_suggestions = set(suggestions)
            
            self.log_test(
                "Unicidade das sugest√µes",
                len(suggestions) == len(unique_suggestions),
                f"Sugest√µes: {len(suggestions)}, √önicas: {len(unique_suggestions)}"
            )
        except Exception as e:
            self.log_test("Unicidade das sugest√µes", False, str(e))
    
    def test_error_handling(self):
        """Testa o tratamento de erros."""
        print("\nüõ°Ô∏è Testando tratamento de erros...")
        
        # Teste 1: Contexto inv√°lido
        try:
            suggestions = ChatSuggestions.get_contextual_suggestions("contexto_inexistente", 4)
            self.log_test(
                "Contexto inv√°lido",
                len(suggestions) > 0,  # Deve retornar sugest√µes padr√£o
                "Retorna sugest√µes padr√£o para contexto inv√°lido"
            )
        except Exception as e:
            self.log_test("Contexto inv√°lido", False, str(e))
        
        # Teste 2: √Årea inv√°lida
        try:
            suggestions = ChatSuggestions.get_suggestions_by_field("area_inexistente", 4)
            self.log_test(
                "√Årea inv√°lida",
                len(suggestions) > 0,  # Deve retornar sugest√µes padr√£o
                "Retorna sugest√µes padr√£o para √°rea inv√°lida"
            )
        except Exception as e:
            self.log_test("√Årea inv√°lida", False, str(e))
        
        # Teste 3: Limite zero ou negativo
        try:
            suggestions = ChatSuggestions.get_contextual_suggestions("general", 0)
            self.log_test(
                "Limite zero",
                len(suggestions) == 0,
                "Retorna lista vazia para limite 0"
            )
        except Exception as e:
            self.log_test("Limite zero", False, str(e))
    
    def run_all_tests(self):
        """Executa todos os testes."""
        print("üöÄ Iniciando suite de testes do Sistema de Sugest√µes\n")
        
        self.test_suggestions_class()
        self.test_api_endpoints()
        self.test_performance()
        self.test_data_quality()
        self.test_error_handling()
        
        # Resumo dos resultados
        print("\n" + "="*60)
        print("üìã RESUMO DOS TESTES")
        print("="*60)
        
        passed = sum(1 for r in self.results if r["passed"])
        total = len(self.results)
        
        print(f"Total: {total} testes")
        print(f"Passou: {passed} testes")
        print(f"Falhou: {total - passed} testes")
        print(f"Taxa de sucesso: {(passed/total)*100:.1f}%")
        
        if passed == total:
            print("\nüéâ TODOS OS TESTES PASSARAM!")
        else:
            print(f"\n‚ö†Ô∏è  {total - passed} TESTE(S) FALHARAM")
            print("\nTestes que falharam:")
            for result in self.results:
                if not result["passed"]:
                    print(f"  ‚ùå {result['test']}: {result['details']}")
        
        return passed == total


def main():
    """Fun√ß√£o principal para executar os testes."""
    import argparse
    
    parser = argparse.ArgumentParser(description="Testes do Sistema de Sugest√µes OLABOT")
    parser.add_argument("--url", default="http://localhost:5001", 
                       help="URL base da aplica√ß√£o (padr√£o: http://localhost:5001)")
    
    args = parser.parse_args()
    
    # Verificar se a aplica√ß√£o est√° rodando
    try:
        response = requests.get(args.url, timeout=5)
        print(f"‚úÖ Aplica√ß√£o rodando em {args.url}")
    except requests.exceptions.RequestException:
        print(f"‚ùå Erro: Aplica√ß√£o n√£o est√° rodando em {args.url}")
        print("   Execute: PORT=5001 python app.py")
        return False
    
    # Executar testes
    test_suite = SuggestionsTestSuite(args.url)
    success = test_suite.run_all_tests()
    
    return success


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
